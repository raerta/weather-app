import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  loading: false,
  success: false,
  refreshSuccess: false,
  error: "",
  cities: [],
  refreshedCities: null,
};

// export const fetchData = createAsyncThunk("fetchData", async (city) => {
//   const response = await axios.post("http://localhost:5000/weather/cityName", {
//     cityName: city,
//   });
//   return response.data;
// });

export const fetchData = createAsyncThunk(
  "fetchData",
  async (city, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        "http://localhost:5000/weather/cityName",
        {
          cityName: city,
        }
      );
      return response.data;
    } catch (err) {
      console.log(err);
      // Note: this is an example assuming the usage of axios. Other fetching libraries would likely have different implementations
      if (!err.response) {
        throw err;
      }

      return rejectWithValue(err.response.data);
    }
  }
);

export const refreshData = createAsyncThunk("refreshData", async (cityIds) => {
  const response = await axios.post("http://localhost:5000/weather/refresh", {
    cityIds,
  });
  return response.data;
});

const weatherSlice = createSlice({
  name: "weather",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    deleteItem: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      console.log(action.payload);
      console.log(state.cities);
      state.cities.splice(action.payload, 1);
      // state.cities.slice(action.payload);
    },
    deleteRefreshedItem: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those change
      console.log(action.payload);
      console.log(state.refreshedCities);
      state.refreshedCities.splice(action.payload, 1);
      // state.cities.slice(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchData.pending, (state, action) => {
      state.loading = true;
      state.success = false;
      state.error = "";
    });
    builder.addCase(fetchData.fulfilled, (state, action) => {
      state.loading = false;
      state.success = true;
      state.refreshSuccess = false;
      state.cities.push(action.payload);
    });
    builder.addCase(fetchData.rejected, (state, action) => {
      state.loading = false;
      if (action.payload) {
        // If a rejected action has a payload, it means that it was returned with rejectWithValue
        console.log(action.payload);
        state.error = action.payload;
      } else {
        state.error = action.error;
      }
    });
    builder.addCase(refreshData.pending, (state, action) => {
      state.loading = true;
      state.refreshSuccess = false;
      state.error = "";
    });
    builder.addCase(refreshData.fulfilled, (state, action) => {
      state.loading = false;
      state.refreshSuccess = true;
      state.refreshedCities = action.payload;
    });
    builder.addCase(refreshData.rejected, (state, action) => {
      state.loading = false;
      state.error = "action.payload.error";
    });
  },
});

export const { deleteItem, deleteRefreshedItem } = weatherSlice.actions;

export default weatherSlice.reducer;
